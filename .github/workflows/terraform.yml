name: 'Terraform Deploy to Azure'

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch: #this attribute will enable the manual run to the pipeline

env:
  ARM_CLIENT_ID: ${{secrets.CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.TENANT_ID}}
  ROOT_PATH: "${{github.workspace}}/src/terraform"

jobs:
  terraform_plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
  #    with:
  #      cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        export ARM_CLIENT_ID=$ARM_CLIENT_ID
        export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
        export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
        export ARM_TENANT_ID=$ARM_TENANT_ID
        terraform init
      working-directory: ${{ENV.ROOT_PATH}}


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{ENV.ROOT_PATH}}

  terraform_apply:
    name: 'Terraform apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    #  with:
    #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        export ARM_CLIENT_ID=$ARM_CLIENT_ID
        export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
        export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
        export ARM_TENANT_ID=$ARM_TENANT_ID
        terraform init
      working-directory: ${{ENV.ROOT_PATH}}

    # Generates an execution plan for Terraform
    - name: Terraform apply
      run: terraform apply -auto-approve
      working-directory: ${{ENV.ROOT_PATH}}

      terraform_destroy:
        name: 'Terraform destroy'
        runs-on: ubuntu-latest
        needs: [terraform_plan,
        terraform_apply,]
        environment: dev
    
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
          run:
            shell: bash
    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4
    
        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
        #  with:
        #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: |
            export ARM_CLIENT_ID=$ARM_CLIENT_ID
            export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
            export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
            export ARM_TENANT_ID=$ARM_TENANT_ID
            terraform init
          working-directory: ${{ENV.ROOT_PATH}}
    
        # Generates an execution plan for Terraform
        - name: Terraform destroy
          run: terraform destroy -auto-approve
          working-directory: ${{ENV.ROOT_PATH}}
